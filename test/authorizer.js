/**
 * Authorizer function tests.
 *
 * Generated by serverless-mocha-plugin.
 *
 * @module tests/authorizer
 */

const UNAUTHORIZED = 'Unauthorized';

const mochaPlugin = require('serverless-mocha-plugin');

const jwtToken = require('./jwt-token.json'); // ["jwt-or-id-token"]

const wrapped = mochaPlugin.getWrapper('authorizer', '/service/functions/authorizer.js', 'handler');
const expect = mochaPlugin.chai.expect;

describe('authorizer', () => {
  it('should not authorize a user without a token', () =>
    wrapped
      .run({
        headers: {}
      })

      .then(res => expect(res).to.be.empty)

      .catch(err => expect(err).to.equal(UNAUTHORIZED)));

  it('should not authorize a user with an invalid a token', () =>
    wrapped
      .run({
        headers: {
          Authorization: 'im-invalid-lol'
        }
      })

      .then(res => expect(res).to.be.empty)

      .catch(err => expect(err).to.equal(UNAUTHORIZED)));

  it('should authorize a user with a valid a token', () =>
    wrapped
      .run({
        headers: {
          Authorization: jwtToken[0]
        }
      })

      .then(res => {
        expect(res).to.not.be.empty;
        expect(res.principalId).to.be.a('string');
        expect(res.context).to.be.an('object');
        expect(res.context.data).to.be.a('string');
      })

      .catch(err => console.error(err))).timeout(30000);
});
